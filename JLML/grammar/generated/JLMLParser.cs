//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JLML.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JLML.Generated {
 #pragma warning disable 3021 
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class JLMLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, IDENTIFIER=12, STRING=13, NUMBER=14, LITERAL=15, USABLE_TOKENS=16, 
		WITH_EXPRESSION=17, DECLARE_STATEMENT=18, SET_STATEMENT=19, PROPERTY_NAME=20, 
		OPEN_BRACE=21, CLOSE_BRACE=22, COLON=23, SEMICOLON=24, COMPARE_TOKENS=25, 
		ADDICTIVE_OPERATORS=26, MULTIPLICATIVE_OPERATORS=27, LINE_COMMENT=28, 
		WS=29;
	public const int
		RULE_jlml = 0, RULE_headers = 1, RULE_element = 2, RULE_elementkey = 3, 
		RULE_pair = 4, RULE_key = 5, RULE_value = 6, RULE_math = 7, RULE_loop = 8, 
		RULE_with = 9, RULE_when = 10, RULE_whenthen = 11, RULE_concat = 12, RULE_list = 13;
	public static readonly string[] ruleNames = {
		"jlml", "headers", "element", "elementkey", "pair", "key", "value", "math", 
		"loop", "with", "when", "whenthen", "concat", "list"
	};

	private static readonly string[] _LiteralNames = {
		null, "'for'", "'in'", "'using'", "'when'", "'if'", "'then'", "'else'", 
		"'$'", "'('", "','", "')'", null, null, null, null, null, null, null, 
		null, null, "'{'", "'}'", "':'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"IDENTIFIER", "STRING", "NUMBER", "LITERAL", "USABLE_TOKENS", "WITH_EXPRESSION", 
		"DECLARE_STATEMENT", "SET_STATEMENT", "PROPERTY_NAME", "OPEN_BRACE", "CLOSE_BRACE", 
		"COLON", "SEMICOLON", "COMPARE_TOKENS", "ADDICTIVE_OPERATORS", "MULTIPLICATIVE_OPERATORS", 
		"LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JLML.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JLMLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JLMLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JLMLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class JlmlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeadersContext[] headers() {
			return GetRuleContexts<HeadersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeadersContext headers(int i) {
			return GetRuleContext<HeadersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public JlmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jlml; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJlml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JlmlContext jlml() {
		JlmlContext _localctx = new JlmlContext(Context, State);
		EnterRule(_localctx, 0, RULE_jlml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DECLARE_STATEMENT || _la==SET_STATEMENT) {
				{
				{
				State = 28; headers();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 34; element();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER || _la==OPEN_BRACE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_STATEMENT() { return GetToken(JLMLParser.DECLARE_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_STATEMENT() { return GetToken(JLMLParser.SET_STATEMENT, 0); }
		public HeadersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaders(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadersContext headers() {
		HeadersContext _localctx = new HeadersContext(Context, State);
		EnterRule(_localctx, 2, RULE_headers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			_la = TokenStream.LA(1);
			if ( !(_la==DECLARE_STATEMENT || _la==SET_STATEMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(JLMLParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(JLMLParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementkeyContext elementkey() {
			return GetRuleContext<ElementkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 41; elementkey();
				}
			}

			State = 44; Match(OPEN_BRACE);
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 47;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 45; element();
					}
					break;
				case 2:
					{
					State = 46; pair();
					}
					break;
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER || _la==OPEN_BRACE );
			State = 51; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JLMLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JLMLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithContext with() {
			return GetRuleContext<WithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenContext when() {
			return GetRuleContext<WhenContext>(0);
		}
		public ElementkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementkey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementkeyContext elementkey() {
		ElementkeyContext _localctx = new ElementkeyContext(Context, State);
		EnterRule(_localctx, 6, RULE_elementkey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(IDENTIFIER);
			State = 54; Match(COLON);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 55; with();
				}
			}

			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 58; loop();
				}
			}

			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3 || _la==T__4) {
				{
				State = 61; when();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JLMLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JLMLParser.SEMICOLON, 0); }
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 8, RULE_pair);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; key();
			State = 65; Match(COLON);
			State = 66; value(0);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 67; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JLMLParser.IDENTIFIER, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 10, RULE_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(JLMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY_NAME() { return GetToken(JLMLParser.PROPERTY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(JLMLParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(JLMLParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConcatContext concat() {
			return GetRuleContext<ConcatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenthenContext whenthen() {
			return GetRuleContext<WhenthenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathContext[] math() {
			return GetRuleContexts<MathContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math(int i) {
			return GetRuleContext<MathContext>(i);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		return value(0);
	}

	private ValueContext value(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ValueContext _localctx = new ValueContext(Context, _parentState);
		ValueContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_value, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 73; Match(STRING);
				}
				break;
			case 2:
				{
				State = 74; Match(PROPERTY_NAME);
				}
				break;
			case 3:
				{
				State = 75; Match(NUMBER);
				}
				break;
			case 4:
				{
				State = 76; Match(LITERAL);
				}
				break;
			case 5:
				{
				State = 77; concat();
				}
				break;
			case 6:
				{
				State = 78; list();
				}
				break;
			case 7:
				{
				State = 79; whenthen();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 90;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValueContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_value);
					State = 82;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 84;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 83; math();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 86;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					} 
				}
				State = 92;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MathContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDICTIVE_OPERATORS() { return GetToken(JLMLParser.ADDICTIVE_OPERATORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATIVE_OPERATORS() { return GetToken(JLMLParser.MULTIPLICATIVE_OPERATORS, 0); }
		public MathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathContext math() {
		MathContext _localctx = new MathContext(Context, State);
		EnterRule(_localctx, 14, RULE_math);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADDICTIVE_OPERATORS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; _localctx.op = Match(ADDICTIVE_OPERATORS);
				State = 94; value(0);
				}
				break;
			case MULTIPLICATIVE_OPERATORS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; _localctx.op = Match(MULTIPLICATIVE_OPERATORS);
				State = 96; value(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JLMLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY_NAME() { return GetToken(JLMLParser.PROPERTY_NAME, 0); }
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 16, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(T__0);
			State = 100; Match(IDENTIFIER);
			State = 101; Match(T__1);
			State = 102; Match(PROPERTY_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(JLMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_EXPRESSION() { return GetToken(JLMLParser.WITH_EXPRESSION, 0); }
		public WithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithContext with() {
		WithContext _localctx = new WithContext(Context, State);
		EnterRule(_localctx, 18, RULE_with);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(T__2);
			State = 105; Match(STRING);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_EXPRESSION) {
				{
				State = 106; Match(WITH_EXPRESSION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY_NAME() { return GetToken(JLMLParser.PROPERTY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARE_TOKENS() { return GetToken(JLMLParser.COMPARE_TOKENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USABLE_TOKENS() { return GetToken(JLMLParser.USABLE_TOKENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConcatContext concat() {
			return GetRuleContext<ConcatContext>(0);
		}
		public WhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenContext when() {
		WhenContext _localctx = new WhenContext(Context, State);
		EnterRule(_localctx, 20, RULE_when);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 110; Match(PROPERTY_NAME);
			State = 111; Match(COMPARE_TOKENS);
			State = 114;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USABLE_TOKENS:
				{
				State = 112; Match(USABLE_TOKENS);
				}
				break;
			case T__7:
			case T__8:
				{
				State = 113; concat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenthenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY_NAME() { return GetToken(JLMLParser.PROPERTY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARE_TOKENS() { return GetToken(JLMLParser.COMPARE_TOKENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USABLE_TOKENS() { return GetToken(JLMLParser.USABLE_TOKENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public WhenthenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenthen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenthen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenthenContext whenthen() {
		WhenthenContext _localctx = new WhenthenContext(Context, State);
		EnterRule(_localctx, 22, RULE_whenthen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 117; Match(PROPERTY_NAME);
			State = 118; Match(COMPARE_TOKENS);
			State = 119; Match(USABLE_TOKENS);
			State = 120; Match(T__5);
			State = 121; value(0);
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 122; Match(T__6);
				State = 123; value(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] USABLE_TOKENS() { return GetTokens(JLMLParser.USABLE_TOKENS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USABLE_TOKENS(int i) {
			return GetToken(JLMLParser.USABLE_TOKENS, i);
		}
		public ConcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatContext concat() {
		ConcatContext _localctx = new ConcatContext(Context, State);
		EnterRule(_localctx, 24, RULE_concat);
		int _la;
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126; Match(T__7);
				State = 127; Match(T__8);
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 128; Match(USABLE_TOKENS);
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__9) {
						{
						State = 129; Match(T__9);
						}
					}

					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==USABLE_TOKENS );
				State = 136; Match(T__10);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137; Match(T__8);
				State = 138; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] USABLE_TOKENS() { return GetTokens(JLMLParser.USABLE_TOKENS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USABLE_TOKENS(int i) {
			return GetToken(JLMLParser.USABLE_TOKENS, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 26, RULE_list);
		int _la;
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141; Match(T__8);
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 142; Match(USABLE_TOKENS);
					State = 144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__9) {
						{
						State = 143; Match(T__9);
						}
					}

					}
					}
					State = 148;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==USABLE_TOKENS );
				State = 150; Match(T__10);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151; Match(T__8);
				State = 152; Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return value_sempred((ValueContext)_localctx, predIndex);
		}
		return true;
	}
	private bool value_sempred(ValueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1F', '\x9E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\a', '\x2', ' ', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '#', '\v', '\x2', '\x3', '\x2', '\x6', 
		'\x2', '&', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\'', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x5', '\x4', '-', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x6', '\x4', '\x32', '\n', '\x4', '\r', '\x4', 
		'\xE', '\x4', '\x33', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', ';', '\n', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '>', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', '\x41', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'G', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', 'S', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x6', '\b', 
		'W', '\n', '\b', '\r', '\b', '\xE', '\b', 'X', '\a', '\b', '[', '\n', 
		'\b', '\f', '\b', '\xE', '\b', '^', '\v', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x64', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', 'n', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'u', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\x7F', '\n', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x85', '\n', 
		'\xE', '\x6', '\xE', '\x87', '\n', '\xE', '\r', '\xE', '\xE', '\xE', '\x88', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x8E', '\n', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x93', 
		'\n', '\xF', '\x6', '\xF', '\x95', '\n', '\xF', '\r', '\xF', '\xE', '\xF', 
		'\x96', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x9C', 
		'\n', '\xF', '\x3', '\xF', '\x2', '\x3', '\xE', '\x10', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x2', '\x4', '\x3', '\x2', '\x14', '\x15', '\x3', '\x2', 
		'\x6', '\a', '\x2', '\xAA', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x4', 
		')', '\x3', '\x2', '\x2', '\x2', '\x6', ',', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x37', '\x3', '\x2', '\x2', '\x2', '\n', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'H', '\x3', '\x2', '\x2', '\x2', '\xE', 'R', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x63', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x14', 'j', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'o', '\x3', '\x2', '\x2', '\x2', '\x18', 'v', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', ' ', '\x5', '\x4', '\x3', '\x2', '\x1F', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', 
		'!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\"', '%', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', 
		'\x2', '\x2', '$', '&', '\x5', '\x6', '\x4', '\x2', '%', '$', '\x3', '\x2', 
		'\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', 
		'\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '\x3', 
		'\x3', '\x2', '\x2', '\x2', ')', '*', '\t', '\x2', '\x2', '\x2', '*', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '+', '-', '\x5', '\b', '\x5', '\x2', 
		',', '+', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '\x31', '\a', '\x17', '\x2', 
		'\x2', '/', '\x32', '\x5', '\x6', '\x4', '\x2', '\x30', '\x32', '\x5', 
		'\n', '\x6', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\a', '\x18', '\x2', '\x2', '\x36', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x38', '\a', '\xE', '\x2', '\x2', '\x38', ':', '\a', '\x19', 
		'\x2', '\x2', '\x39', ';', '\x5', '\x14', '\v', '\x2', ':', '\x39', '\x3', 
		'\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x3', 
		'\x2', '\x2', '\x2', '<', '>', '\x5', '\x12', '\n', '\x2', '=', '<', '\x3', 
		'\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '@', '\x3', 
		'\x2', '\x2', '\x2', '?', '\x41', '\x5', '\x16', '\f', '\x2', '@', '?', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x5', '\f', '\a', '\x2', 
		'\x43', '\x44', '\a', '\x19', '\x2', '\x2', '\x44', '\x46', '\x5', '\xE', 
		'\b', '\x2', '\x45', 'G', '\a', '\x1A', '\x2', '\x2', '\x46', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 
		'\v', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', '\xE', '\x2', '\x2', 
		'I', '\r', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\b', '\b', '\x1', '\x2', 
		'K', 'S', '\a', '\xF', '\x2', '\x2', 'L', 'S', '\a', '\x16', '\x2', '\x2', 
		'M', 'S', '\a', '\x10', '\x2', '\x2', 'N', 'S', '\a', '\x11', '\x2', '\x2', 
		'O', 'S', '\x5', '\x1A', '\xE', '\x2', 'P', 'S', '\x5', '\x1C', '\xF', 
		'\x2', 'Q', 'S', '\x5', '\x18', '\r', '\x2', 'R', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'L', '\x3', '\x2', '\x2', '\x2', 'R', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'N', '\x3', '\x2', '\x2', '\x2', 'R', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'S', '\\', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\f', '\x4', '\x2', 
		'\x2', 'U', 'W', '\x5', '\x10', '\t', '\x2', 'V', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '[', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'T', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', 
		'\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', 
		'\x2', '\x2', ']', '\xF', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\a', '\x1C', '\x2', '\x2', '`', '\x64', 
		'\x5', '\xE', '\b', '\x2', '\x61', '\x62', '\a', '\x1D', '\x2', '\x2', 
		'\x62', '\x64', '\x5', '\xE', '\b', '\x2', '\x63', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\x3', '\x2', '\x2', 
		'\x66', 'g', '\a', '\xE', '\x2', '\x2', 'g', 'h', '\a', '\x4', '\x2', 
		'\x2', 'h', 'i', '\a', '\x16', '\x2', '\x2', 'i', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'k', '\a', '\x5', '\x2', '\x2', 'k', 'm', '\a', '\xF', 
		'\x2', '\x2', 'l', 'n', '\a', '\x13', '\x2', '\x2', 'm', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'p', '\t', '\x3', '\x2', '\x2', 'p', 'q', '\a', 
		'\x16', '\x2', '\x2', 'q', 't', '\a', '\x1B', '\x2', '\x2', 'r', 'u', 
		'\a', '\x12', '\x2', '\x2', 's', 'u', '\x5', '\x1A', '\xE', '\x2', 't', 
		'r', '\x3', '\x2', '\x2', '\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 
		'u', '\x17', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\t', '\x3', '\x2', 
		'\x2', 'w', 'x', '\a', '\x16', '\x2', '\x2', 'x', 'y', '\a', '\x1B', '\x2', 
		'\x2', 'y', 'z', '\a', '\x12', '\x2', '\x2', 'z', '{', '\a', '\b', '\x2', 
		'\x2', '{', '~', '\x5', '\xE', '\b', '\x2', '|', '}', '\a', '\t', '\x2', 
		'\x2', '}', '\x7F', '\x5', '\xE', '\b', '\x2', '~', '|', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\a', '\n', '\x2', '\x2', 
		'\x81', '\x86', '\a', '\v', '\x2', '\x2', '\x82', '\x84', '\a', '\x12', 
		'\x2', '\x2', '\x83', '\x85', '\a', '\f', '\x2', '\x2', '\x84', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x87', '\x3', '\x2', '\x2', '\x2', '\x86', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8E', '\a', '\r', 
		'\x2', '\x2', '\x8B', '\x8C', '\a', '\v', '\x2', '\x2', '\x8C', '\x8E', 
		'\a', '\r', '\x2', '\x2', '\x8D', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x94', '\a', '\v', '\x2', '\x2', '\x90', '\x92', 
		'\a', '\x12', '\x2', '\x2', '\x91', '\x93', '\a', '\f', '\x2', '\x2', 
		'\x92', '\x91', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x95', '\x3', '\x2', '\x2', '\x2', '\x94', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9C', 
		'\a', '\r', '\x2', '\x2', '\x99', '\x9A', '\a', '\v', '\x2', '\x2', '\x9A', 
		'\x9C', '\a', '\r', '\x2', '\x2', '\x9B', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '!', '\'', ',', '\x31', '\x33', ':', '=', 
		'@', '\x46', 'R', 'X', '\\', '\x63', 'm', 't', '~', '\x84', '\x88', '\x8D', 
		'\x92', '\x96', '\x9B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace JLML.Generated
