//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JLML.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JLML.Generated {
 #pragma warning disable 3021 
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class JLMLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, OPEN_BRACE=4, CLOSE_BRACE=5, COLON=6, SEMICOLON=7, 
		COMPARE_TOKENS=8, ADDICTIVE_OPERATORS=9, MULTIPLICATIVE_OPERATORS=10, 
		DOT=11, DOLLAR_SIGN=12, SET=13, DECLARE=14, USING=15, FOR=16, WHEN=17, 
		IN=18, FROM=19, THEN=20, ELSE=21, IDENTIFIER=22, STRING=23, NUMBER=24, 
		LITERAL=25, PROPERTY_NAME=26, LINE_COMMENT=27, WS=28;
	public const int
		RULE_jlml = 0, RULE_headers = 1, RULE_setheader = 2, RULE_assignheader = 3, 
		RULE_element = 4, RULE_elementkey = 5, RULE_with = 6, RULE_loop = 7, RULE_when = 8, 
		RULE_pair = 9, RULE_key = 10, RULE_value = 11, RULE_list = 12, RULE_concat = 13;
	public static readonly string[] ruleNames = {
		"jlml", "headers", "setheader", "assignheader", "element", "elementkey", 
		"with", "loop", "when", "pair", "key", "value", "list", "concat"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "')'", "'{'", "'}'", "':'", "';'", null, null, null, 
		"'.'", "'$'", "'set'", "'declare'", "'using'", "'for'", null, "'in'", 
		"'from'", "'then'", "'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "OPEN_BRACE", "CLOSE_BRACE", "COLON", "SEMICOLON", 
		"COMPARE_TOKENS", "ADDICTIVE_OPERATORS", "MULTIPLICATIVE_OPERATORS", "DOT", 
		"DOLLAR_SIGN", "SET", "DECLARE", "USING", "FOR", "WHEN", "IN", "FROM", 
		"THEN", "ELSE", "IDENTIFIER", "STRING", "NUMBER", "LITERAL", "PROPERTY_NAME", 
		"LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JLML.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JLMLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JLMLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JLMLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class JlmlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeadersContext headers() {
			return GetRuleContext<HeadersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public JlmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jlml; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJlml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JlmlContext jlml() {
		JlmlContext _localctx = new JlmlContext(Context, State);
		EnterRule(_localctx, 0, RULE_jlml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET || _la==DECLARE) {
				{
				State = 28; headers();
				}
			}

			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 31; element();
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==OPEN_BRACE || _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetheaderContext[] setheader() {
			return GetRuleContexts<SetheaderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetheaderContext setheader(int i) {
			return GetRuleContext<SetheaderContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignheaderContext[] assignheader() {
			return GetRuleContexts<AssignheaderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignheaderContext assignheader(int i) {
			return GetRuleContext<AssignheaderContext>(i);
		}
		public HeadersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaders(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadersContext headers() {
		HeadersContext _localctx = new HeadersContext(Context, State);
		EnterRule(_localctx, 2, RULE_headers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 38;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SET:
					{
					State = 36; setheader();
					}
					break;
				case DECLARE:
					{
					State = 37; assignheader();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SET || _la==DECLARE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetheaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(JLMLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY_NAME() { return GetToken(JLMLParser.PROPERTY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(JLMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JLMLParser.SEMICOLON, 0); }
		public SetheaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setheader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetheader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetheaderContext setheader() {
		SetheaderContext _localctx = new SetheaderContext(Context, State);
		EnterRule(_localctx, 4, RULE_setheader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(SET);
			State = 43; Match(PROPERTY_NAME);
			State = 44; Match(STRING);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 45; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignheaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(JLMLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JLMLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(JLMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JLMLParser.SEMICOLON, 0); }
		public AssignheaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignheader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignheader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignheaderContext assignheader() {
		AssignheaderContext _localctx = new AssignheaderContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignheader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(DECLARE);
			State = 49; Match(IDENTIFIER);
			State = 50; Match(STRING);
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 51; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementkeyContext elementkey() {
			return GetRuleContext<ElementkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JLMLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(JLMLParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(JLMLParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 8, RULE_element);
		int _la;
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; elementkey();
				State = 55; Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 57; elementkey();
					}
				}

				State = 60; Match(OPEN_BRACE);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPEN_BRACE || _la==IDENTIFIER) {
					{
					State = 63;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						State = 61; pair();
						}
						break;
					case 2:
						{
						State = 62; element();
						}
						break;
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 68; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JLMLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JLMLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithContext with() {
			return GetRuleContext<WithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenContext when() {
			return GetRuleContext<WhenContext>(0);
		}
		public ElementkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementkey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementkeyContext elementkey() {
		ElementkeyContext _localctx = new ElementkeyContext(Context, State);
		EnterRule(_localctx, 10, RULE_elementkey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(IDENTIFIER);
			State = 72; Match(COLON);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 73; with();
				}
			}

			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 76; loop();
				}
			}

			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 79; when();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(JLMLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(JLMLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JLMLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(JLMLParser.FROM, 0); }
		public WithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithContext with() {
		WithContext _localctx = new WithContext(Context, State);
		EnterRule(_localctx, 12, RULE_with);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(USING);
			State = 83; Match(IDENTIFIER);
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 84; Match(FROM);
				State = 85; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(JLMLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(JLMLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JLMLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(JLMLParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY_NAME() { return GetToken(JLMLParser.PROPERTY_NAME, 0); }
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 14, RULE_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(FOR);
			State = 89; Match(IDENTIFIER);
			State = 90; Match(IN);
			State = 91;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==PROPERTY_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(JLMLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY_NAME() { return GetToken(JLMLParser.PROPERTY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARE_TOKENS() { return GetToken(JLMLParser.COMPARE_TOKENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(JLMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(JLMLParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(JLMLParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConcatContext concat() {
			return GetRuleContext<ConcatContext>(0);
		}
		public WhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenContext when() {
		WhenContext _localctx = new WhenContext(Context, State);
		EnterRule(_localctx, 16, RULE_when);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(WHEN);
			State = 94; Match(PROPERTY_NAME);
			State = 95; Match(COMPARE_TOKENS);
			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 96; Match(STRING);
				}
				break;
			case NUMBER:
				{
				State = 97; Match(NUMBER);
				}
				break;
			case LITERAL:
				{
				State = 98; Match(LITERAL);
				}
				break;
			case T__0:
			case DOLLAR_SIGN:
				{
				State = 99; concat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JLMLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JLMLParser.SEMICOLON, 0); }
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 18, RULE_pair);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; key();
			State = 103; Match(COLON);
			State = 104; value();
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 105; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JLMLParser.IDENTIFIER, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 20, RULE_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(JLMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY_NAME() { return GetToken(JLMLParser.PROPERTY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JLMLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(JLMLParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(JLMLParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConcatContext concat() {
			return GetRuleContext<ConcatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_value);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; Match(PROPERTY_NAME);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; Match(IDENTIFIER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113; Match(NUMBER);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 114; Match(LITERAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 115; concat();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 116; list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(JLMLParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(JLMLParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(JLMLParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(JLMLParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LITERAL() { return GetTokens(JLMLParser.LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL(int i) {
			return GetToken(JLMLParser.LITERAL, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 24, RULE_list);
		int _la;
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; Match(T__0);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 120;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << NUMBER) | (1L << LITERAL))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__1) {
						{
						State = 121; Match(T__1);
						}
					}

					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << NUMBER) | (1L << LITERAL))) != 0) );
				State = 128; Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129; Match(T__0);
				State = 130; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR_SIGN() { return GetToken(JLMLParser.DOLLAR_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(JLMLParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(JLMLParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(JLMLParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(JLMLParser.NUMBER, i);
		}
		public ConcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatContext concat() {
		ConcatContext _localctx = new ConcatContext(Context, State);
		EnterRule(_localctx, 26, RULE_concat);
		int _la;
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR_SIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133; Match(DOLLAR_SIGN);
				State = 134; Match(T__0);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 135;
					_la = TokenStream.LA(1);
					if ( !(_la==STRING || _la==NUMBER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 137;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__1) {
						{
						State = 136; Match(T__1);
						}
					}

					}
					}
					State = 141;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STRING || _la==NUMBER );
				State = 143; Match(T__2);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144; Match(T__0);
				State = 145; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', '\x97', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x5', '\x2', ' ', '\n', 
		'\x2', '\x3', '\x2', '\x6', '\x2', '#', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '$', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', ')', '\n', '\x3', 
		'\r', '\x3', '\xE', '\x3', '*', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x31', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x37', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'=', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'\x42', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x45', '\v', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'H', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', 'M', '\n', '\a', '\x3', '\a', '\x5', '\a', 'P', '\n', 
		'\a', '\x3', '\a', '\x5', '\a', 'S', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', 'Y', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', 'g', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', 'm', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', 'x', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '}', '\n', '\xE', '\x6', '\xE', '\x7F', '\n', '\xE', '\r', 
		'\xE', '\xE', '\xE', '\x80', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x86', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x8C', '\n', '\xF', '\x6', '\xF', 
		'\x8E', '\n', '\xF', '\r', '\xF', '\xE', '\xF', '\x8F', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x95', '\n', '\xF', '\x3', 
		'\xF', '\x2', '\x2', '\x10', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', '\x5', 
		'\x4', '\x2', '\x18', '\x18', '\x1C', '\x1C', '\x3', '\x2', '\x19', '\x1B', 
		'\x3', '\x2', '\x19', '\x1A', '\x2', '\xA6', '\x2', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '(', '\x3', '\x2', '\x2', '\x2', '\x6', ',', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x32', '\x3', '\x2', '\x2', '\x2', '\n', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'I', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'T', '\x3', '\x2', '\x2', '\x2', '\x10', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '_', '\x3', '\x2', '\x2', '\x2', '\x14', 'h', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'n', '\x3', '\x2', '\x2', '\x2', '\x18', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x85', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', ' ', '\x5', '\x4', '\x3', '\x2', '\x1F', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\"', '\x3', '\x2', '\x2', '\x2', '!', '#', '\x5', '\n', '\x6', 
		'\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', 
		'\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', 
		'\x2', '\x2', '\x2', '%', '\x3', '\x3', '\x2', '\x2', '\x2', '&', ')', 
		'\x5', '\x6', '\x4', '\x2', '\'', ')', '\x5', '\b', '\x5', '\x2', '(', 
		'&', '\x3', '\x2', '\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', 
		')', '*', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', 
		'*', '+', '\x3', '\x2', '\x2', '\x2', '+', '\x5', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\a', '\xF', '\x2', '\x2', '-', '.', '\a', '\x1C', '\x2', 
		'\x2', '.', '\x30', '\a', '\x19', '\x2', '\x2', '/', '\x31', '\a', '\t', 
		'\x2', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\a', '\x10', '\x2', '\x2', '\x33', '\x34', '\a', '\x18', 
		'\x2', '\x2', '\x34', '\x36', '\a', '\x19', '\x2', '\x2', '\x35', '\x37', 
		'\a', '\t', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\x5', '\f', '\a', '\x2', '\x39', ':', '\a', 
		'\t', '\x2', '\x2', ':', 'H', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x5', 
		'\f', '\a', '\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', 
		'\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '\x43', 
		'\a', '\x6', '\x2', '\x2', '?', '\x42', '\x5', '\x14', '\v', '\x2', '@', 
		'\x42', '\x5', '\n', '\x6', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\a', '\a', '\x2', 
		'\x2', 'G', '\x38', '\x3', '\x2', '\x2', '\x2', 'G', '<', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\v', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\x18', 
		'\x2', '\x2', 'J', 'L', '\a', '\b', '\x2', '\x2', 'K', 'M', '\x5', '\xE', 
		'\b', '\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'O', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x5', '\x10', 
		'\t', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'R', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x5', '\x12', 
		'\n', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'S', '\r', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\x11', 
		'\x2', '\x2', 'U', 'X', '\a', '\x18', '\x2', '\x2', 'V', 'W', '\a', '\x15', 
		'\x2', '\x2', 'W', 'Y', '\a', '\x18', '\x2', '\x2', 'X', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '[', '\a', '\x12', '\x2', '\x2', '[', '\\', 
		'\a', '\x18', '\x2', '\x2', '\\', ']', '\a', '\x14', '\x2', '\x2', ']', 
		'^', '\t', '\x2', '\x2', '\x2', '^', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\a', '\x13', '\x2', '\x2', '`', '\x61', '\a', '\x1C', '\x2', 
		'\x2', '\x61', '\x66', '\a', '\n', '\x2', '\x2', '\x62', 'g', '\a', '\x19', 
		'\x2', '\x2', '\x63', 'g', '\a', '\x1A', '\x2', '\x2', '\x64', 'g', '\a', 
		'\x1B', '\x2', '\x2', '\x65', 'g', '\x5', '\x1C', '\xF', '\x2', '\x66', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x66', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\x13', '\x3', '\x2', '\x2', '\x2', 'h', 'i', 
		'\x5', '\x16', '\f', '\x2', 'i', 'j', '\a', '\b', '\x2', '\x2', 'j', 'l', 
		'\x5', '\x18', '\r', '\x2', 'k', 'm', '\a', '\t', '\x2', '\x2', 'l', 'k', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 
		'\x15', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\x18', '\x2', '\x2', 
		'o', '\x17', '\x3', '\x2', '\x2', '\x2', 'p', 'x', '\a', '\x19', '\x2', 
		'\x2', 'q', 'x', '\a', '\x1C', '\x2', '\x2', 'r', 'x', '\a', '\x18', '\x2', 
		'\x2', 's', 'x', '\a', '\x1A', '\x2', '\x2', 't', 'x', '\a', '\x1B', '\x2', 
		'\x2', 'u', 'x', '\x5', '\x1C', '\xF', '\x2', 'v', 'x', '\x5', '\x1A', 
		'\xE', '\x2', 'w', 'p', '\x3', '\x2', '\x2', '\x2', 'w', 'q', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'r', '\x3', '\x2', '\x2', '\x2', 'w', 's', '\x3', '\x2', 
		'\x2', '\x2', 'w', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'v', '\x3', '\x2', '\x2', '\x2', 'x', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 'y', '~', '\a', '\x3', '\x2', '\x2', 'z', '|', '\t', 
		'\x3', '\x2', '\x2', '{', '}', '\a', '\x4', '\x2', '\x2', '|', '{', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '~', 'z', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x86', '\a', '\x5', '\x2', '\x2', '\x83', 
		'\x84', '\a', '\x3', '\x2', '\x2', '\x84', '\x86', '\a', '\x5', '\x2', 
		'\x2', '\x85', 'y', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x88', '\a', '\xE', '\x2', '\x2', '\x88', '\x8D', '\a', '\x3', '\x2', 
		'\x2', '\x89', '\x8B', '\t', '\x4', '\x2', '\x2', '\x8A', '\x8C', '\a', 
		'\x4', '\x2', '\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x95', '\a', '\x5', '\x2', '\x2', '\x92', '\x93', '\a', 
		'\x3', '\x2', '\x2', '\x93', '\x95', '\a', '\x5', '\x2', '\x2', '\x94', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1F', '$', 
		'(', '*', '\x30', '\x36', '<', '\x41', '\x43', 'G', 'L', 'O', 'R', 'X', 
		'\x66', 'l', 'w', '|', '\x80', '\x85', '\x8B', '\x8F', '\x94',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace JLML.Generated
