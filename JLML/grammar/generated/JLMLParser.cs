//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JLML.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JLML.Generated {
 #pragma warning disable 3021 
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class JLMLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, IDENTIFIER=2, STRING=3, NUMBER=4, LITERAL=5, WITH_EXPRESSION=6, 
		FUNCTION_SIGNATURE=7, FUNCTION_PARAMETER_LIST=8, OPEN_BRACE=9, CLOSE_BRACE=10, 
		COLON=11, SEMICOLON=12, ADDICTIVE_OPERATORS=13, MULTIPLICATIVE_OPERATORS=14, 
		LINE_COMMENT=15, WS=16;
	public const int
		RULE_jlml = 0, RULE_obj = 1, RULE_pair = 2, RULE_key = 3, RULE_value = 4, 
		RULE_math = 5, RULE_with = 6;
	public static readonly string[] ruleNames = {
		"jlml", "obj", "pair", "key", "value", "math", "with"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", null, null, null, null, null, null, null, "'{'", "'}'", "':'", 
		"';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "IDENTIFIER", "STRING", "NUMBER", "LITERAL", "WITH_EXPRESSION", 
		"FUNCTION_SIGNATURE", "FUNCTION_PARAMETER_LIST", "OPEN_BRACE", "CLOSE_BRACE", 
		"COLON", "SEMICOLON", "ADDICTIVE_OPERATORS", "MULTIPLICATIVE_OPERATORS", 
		"LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JLML.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JLMLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JLMLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JLMLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class JlmlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext[] obj() {
			return GetRuleContexts<ObjContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj(int i) {
			return GetRuleContext<ObjContext>(i);
		}
		public JlmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jlml; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJLMLListener typedListener = listener as IJLMLListener;
			if (typedListener != null) typedListener.EnterJlml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJLMLListener typedListener = listener as IJLMLListener;
			if (typedListener != null) typedListener.ExitJlml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJlml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JlmlContext jlml() {
		JlmlContext _localctx = new JlmlContext(Context, State);
		EnterRule(_localctx, 0, RULE_jlml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; obj();
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 15; Match(T__0);
				State = 16; obj();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(JLMLParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(JLMLParser.CLOSE_BRACE, 0); }
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJLMLListener typedListener = listener as IJLMLListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJLMLListener typedListener = listener as IJLMLListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 2, RULE_obj);
		int _la;
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 22; Match(OPEN_BRACE);
				State = 23; pair();
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << STRING) | (1L << OPEN_BRACE))) != 0)) {
					{
					{
					State = 24; pair();
					}
					}
					State = 29;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 30; Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 32; Match(OPEN_BRACE);
				State = 33; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JLMLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JLMLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJLMLListener typedListener = listener as IJLMLListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJLMLListener typedListener = listener as IJLMLListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 4, RULE_pair);
		int _la;
		try {
			int _alt;
			State = 47;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; key();
				State = 37; Match(COLON);
				State = 39;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 38; value(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 41;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 43; Match(SEMICOLON);
					}
				}

				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46; obj();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(JLMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JLMLParser.IDENTIFIER, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJLMLListener typedListener = listener as IJLMLListener;
			if (typedListener != null) typedListener.EnterKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJLMLListener typedListener = listener as IJLMLListener;
			if (typedListener != null) typedListener.ExitKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 6, RULE_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JLMLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(JLMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(JLMLParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(JLMLParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithContext with() {
			return GetRuleContext<WithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathContext[] math() {
			return GetRuleContexts<MathContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math(int i) {
			return GetRuleContext<MathContext>(i);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJLMLListener typedListener = listener as IJLMLListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJLMLListener typedListener = listener as IJLMLListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		return value(0);
	}

	private ValueContext value(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ValueContext _localctx = new ValueContext(Context, _parentState);
		ValueContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_value, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 52; Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 53; Match(STRING);
				}
				break;
			case 3:
				{
				State = 54; Match(NUMBER);
				}
				break;
			case 4:
				{
				State = 55; obj();
				}
				break;
			case 5:
				{
				State = 56; Match(LITERAL);
				}
				break;
			case 6:
				{
				State = 57; with();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 68;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValueContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_value);
					State = 60;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 62;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 61; math();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 64;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					} 
				}
				State = 70;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDICTIVE_OPERATORS() { return GetToken(JLMLParser.ADDICTIVE_OPERATORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATIVE_OPERATORS() { return GetToken(JLMLParser.MULTIPLICATIVE_OPERATORS, 0); }
		public MathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJLMLListener typedListener = listener as IJLMLListener;
			if (typedListener != null) typedListener.EnterMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJLMLListener typedListener = listener as IJLMLListener;
			if (typedListener != null) typedListener.ExitMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathContext math() {
		MathContext _localctx = new MathContext(Context, State);
		EnterRule(_localctx, 10, RULE_math);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			_la = TokenStream.LA(1);
			if ( !(_la==ADDICTIVE_OPERATORS || _la==MULTIPLICATIVE_OPERATORS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 72; value(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(JLMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_EXPRESSION() { return GetToken(JLMLParser.WITH_EXPRESSION, 0); }
		public WithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJLMLListener typedListener = listener as IJLMLListener;
			if (typedListener != null) typedListener.EnterWith(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJLMLListener typedListener = listener as IJLMLListener;
			if (typedListener != null) typedListener.ExitWith(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJLMLVisitor<TResult> typedVisitor = visitor as IJLMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithContext with() {
		WithContext _localctx = new WithContext(Context, State);
		EnterRule(_localctx, 12, RULE_with);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(STRING);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_EXPRESSION) {
				{
				State = 75; Match(WITH_EXPRESSION);
				}
			}

			State = 78; obj();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return value_sempred((ValueContext)_localctx, predIndex);
		}
		return true;
	}
	private bool value_sempred(ValueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x12', 'S', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x14', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x17', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x1C', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x1F', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '%', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x6', '\x4', '*', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '+', 
		'\x3', '\x4', '\x5', '\x4', '/', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x32', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '=', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x6', 
		'\x6', '\x41', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '\x42', '\a', '\x6', 
		'\x45', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'H', '\v', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'O', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x2', '\x3', 
		'\n', '\t', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x2', '\x4', 
		'\x3', '\x2', '\x4', '\x5', '\x3', '\x2', '\xF', '\x10', '\x2', 'Y', '\x2', 
		'\x10', '\x3', '\x2', '\x2', '\x2', '\x4', '$', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x31', '\x3', '\x2', '\x2', '\x2', '\b', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\n', '<', '\x3', '\x2', '\x2', '\x2', '\f', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'L', '\x3', '\x2', '\x2', '\x2', '\x10', '\x15', 
		'\x5', '\x4', '\x3', '\x2', '\x11', '\x12', '\a', '\x3', '\x2', '\x2', 
		'\x12', '\x14', '\x5', '\x4', '\x3', '\x2', '\x13', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x17', '\x3', '\x2', '\x2', '\x2', '\x15', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x3', '\x3', '\x2', '\x2', '\x2', '\x17', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x19', '\a', '\v', '\x2', '\x2', '\x19', '\x1D', 
		'\x5', '\x6', '\x4', '\x2', '\x1A', '\x1C', '\x5', '\x6', '\x4', '\x2', 
		'\x1B', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', ' ', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\a', '\f', '\x2', '\x2', 
		'!', '%', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', '\v', '\x2', '\x2', 
		'#', '%', '\a', '\f', '\x2', '\x2', '$', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '%', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '&', '\'', '\x5', '\b', '\x5', '\x2', '\'', ')', '\a', '\r', 
		'\x2', '\x2', '(', '*', '\x5', '\n', '\x6', '\x2', ')', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x3', '\x2', 
		'\x2', '\x2', '-', '/', '\a', '\xE', '\x2', '\x2', '.', '-', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x32', '\x5', '\x4', '\x3', '\x2', '\x31', 
		'&', '\x3', '\x2', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\a', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\t', 
		'\x2', '\x2', '\x2', '\x34', '\t', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\b', '\x6', '\x1', '\x2', '\x36', '=', '\a', '\x4', '\x2', '\x2', 
		'\x37', '=', '\a', '\x5', '\x2', '\x2', '\x38', '=', '\a', '\x6', '\x2', 
		'\x2', '\x39', '=', '\x5', '\x4', '\x3', '\x2', ':', '=', '\a', '\a', 
		'\x2', '\x2', ';', '=', '\x5', '\xE', '\b', '\x2', '<', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '<', '\x37', '\x3', '\x2', '\x2', '\x2', '<', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x39', '\x3', '\x2', '\x2', '\x2', '<', 
		':', '\x3', '\x2', '\x2', '\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', 
		'=', '\x46', '\x3', '\x2', '\x2', '\x2', '>', '@', '\f', '\x4', '\x2', 
		'\x2', '?', '\x41', '\x5', '\f', '\a', '\x2', '@', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x45', '\x3', '\x2', '\x2', '\x2', '\x44', '>', '\x3', '\x2', 
		'\x2', '\x2', '\x45', 'H', '\x3', '\x2', '\x2', '\x2', '\x46', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 
		'\v', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\t', '\x3', '\x2', '\x2', 'J', 'K', '\x5', '\n', '\x6', '\x2', 
		'K', '\r', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\a', '\x5', '\x2', '\x2', 
		'M', 'O', '\a', '\b', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x5', '\x4', '\x3', '\x2', 'Q', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x15', '\x1D', '$', '+', '.', '\x31', '<', '\x42', '\x46', 
		'N',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace JLML.Generated
